/** generated by
 * - https://jsr.io/@narumincho/commection@0.0.2
 * - https://jsr.io/@narumincho/js-ts-code-generator@0.8.2
 * Do not edit!
 *
 * @module
 */

import * as a from "../common/id.ts";
import * as b from "../../../runtime/client/request.ts";
import * as c from "../common/type.ts";
import * as d from "../common/filterType.ts";
import * as e from "../common/filterSearchParamsCodec.ts";
const prefix: string = "/commection";

export const getCollectionByIdSet = async (
  idSet: ReadonlySet<a.CollectionId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.CollectionId, b.DataOrError<c.Collection>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "collection",
}));

export const getBrandByIdSet = async (
  idSet: ReadonlySet<a.BrandId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.BrandId, b.DataOrError<c.Brand>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "brand",
}));

export const getAccountByIdSet = async (
  idSet: ReadonlySet<a.AccountId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.AccountId, b.DataOrError<c.Account>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "account",
}));

export const getAccountPrivateByIdSet = async (
  idSet: ReadonlySet<a.AccountId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.AccountId, b.DataOrError<c.AccountPrivate>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "accountPrivate",
}));

export const getDesignerByIdSet = async (
  idSet: ReadonlySet<a.DesignerId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.DesignerId, b.DataOrError<c.Designer>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "designer",
}));

export const getItemByIdSet = async (
  idSet: ReadonlySet<a.ItemId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.ItemId, b.DataOrError<c.Item>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "item",
}));

export const getItemImageByIdSet = async (
  idSet: ReadonlySet<a.ItemId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.ItemId, b.DataOrError<c.ItemImage>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "itemImage",
}));

export const getItemEventByIdSet = async (
  idSet: ReadonlySet<a.ItemEventId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.ItemEventId, b.DataOrError<c.ItemEvent>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "itemEvent",
}));

export const getItemEventTypeByIdSet = async (
  idSet: ReadonlySet<a.ItemEventTypeId>,
  bearerToken: string | undefined,
): Promise<
  ReadonlyMap<a.ItemEventTypeId, b.DataOrError<c.ItemEventType>>
> => (await b.getResourceMultipleByIdSet({
  bearerToken,
  idSet,
  prefix,
  resourceName: "itemEventType",
}));

export const getCollectionListByFilter = async (
  filter: d.CollectionFilter,
  bearerToken: string | undefined,
): Promise<
  b.FilterResponse<a.CollectionId, c.Collection>
> => (await b.getResourceListByFilter({
  prefix,
  resourceName: "collection",
  searchParams: e.collectionFilterToSearchParams(filter),
  bearerToken,
}));

export const getBrandListByFilter = async (
  filter: d.BrandFilter,
  bearerToken: string | undefined,
): Promise<
  b.FilterResponse<a.BrandId, c.Brand>
> => (await b.getResourceListByFilter({
  prefix,
  resourceName: "brand",
  searchParams: e.brandFilterToSearchParams(filter),
  bearerToken,
}));

export const getAccountListByFilter = async (
  filter: d.AccountFilter,
  bearerToken: string | undefined,
): Promise<
  b.FilterResponse<a.AccountId, c.Account>
> => (await b.getResourceListByFilter({
  prefix,
  resourceName: "account",
  searchParams: e.accountFilterToSearchParams(filter),
  bearerToken,
}));

export const getItemListByFilter = async (
  filter: d.ItemFilter,
  bearerToken: string | undefined,
): Promise<
  b.FilterResponse<a.ItemId, c.Item>
> => (await b.getResourceListByFilter({
  prefix,
  resourceName: "item",
  searchParams: e.itemFilterToSearchParams(filter),
  bearerToken,
}));

export const getItemEventListByFilter = async (
  filter: d.ItemEventFilter,
  bearerToken: string | undefined,
): Promise<
  b.FilterResponse<a.ItemEventId, c.ItemEvent>
> => (await b.getResourceListByFilter({
  prefix,
  resourceName: "itemEvent",
  searchParams: e.itemEventFilterToSearchParams(filter),
  bearerToken,
}));

export const getItemEventTypeListByFilter = async (
  filter: d.ItemEventTypeFilter,
  bearerToken: string | undefined,
): Promise<
  b.FilterResponse<a.ItemEventTypeId, c.ItemEventType>
> => (await b.getResourceListByFilter({
  prefix,
  resourceName: "itemEventType",
  searchParams: e.itemEventTypeFilterToSearchParams(filter),
  bearerToken,
}));

export const getMyAccount = async (
  bearerToken: string | undefined,
): Promise<
  b.DataOrError<c.Account>
> => (await b.getOneApi({ prefix, name: "myAccount", bearerToken }));
