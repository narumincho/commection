/** generated by
 * - https://jsr.io/@narumincho/commection@0.0.1
 * - https://jsr.io/@narumincho/js-ts-code-generator@0.8.2
 * Do not edit!
 *
 * @module
 */

import * as a from "./filterType.ts";
import * as b from "../../../runtime/common.ts";
import * as c from "./id.ts";
export const collectionFilterFromSearchParams = (
  searchParams: URLSearchParams,
): a.CollectionFilter => {
  const name: string | null = searchParams.get("name");
  const brandId: string | null = searchParams.get("brandId");
  return {
    name: name ?? undefined,
    brandId: typeof brandId === "string"
      ? b.assertBrandString<c.BrandId>(brandId)
      : undefined,
  };
};

export const collectionFilterToSearchParams = (
  filter: a.CollectionFilter,
): URLSearchParams => (new URLSearchParams([
  ...filter.name === undefined ? [] : [["name", filter.name]],
  ...filter.brandId === undefined ? [] : [["brandId", filter.brandId]],
]));

export const brandFilterFromSearchParams = (
  searchParams: URLSearchParams,
): a.BrandFilter => {
  const name: string | null = searchParams.get("name");
  const designerId: string | null = searchParams.get("designerId");
  return {
    name: name ?? undefined,
    designerId: typeof designerId === "string"
      ? b.assertBrandString<c.DesignerId>(designerId)
      : undefined,
  };
};

export const brandFilterToSearchParams = (
  filter: a.BrandFilter,
): URLSearchParams => (new URLSearchParams([
  ...filter.name === undefined ? [] : [["name", filter.name]],
  ...filter.designerId === undefined ? [] : [["designerId", filter.designerId]],
]));

export const accountFilterFromSearchParams = (
  searchParams: URLSearchParams,
): a.AccountFilter => {
  const name: string | null = searchParams.get("name");
  const designerId: string | null = searchParams.get("designerId");
  return {
    name: name ?? undefined,
    designerId: typeof designerId === "string"
      ? b.assertBrandString<c.DesignerId>(designerId)
      : undefined,
  };
};

export const accountFilterToSearchParams = (
  filter: a.AccountFilter,
): URLSearchParams => (new URLSearchParams([
  ...filter.name === undefined ? [] : [["name", filter.name]],
  ...filter.designerId === undefined ? [] : [["designerId", filter.designerId]],
]));

export const itemFilterFromSearchParams = (
  searchParams: URLSearchParams,
): a.ItemFilter => {
  const name: string | null = searchParams.get("name");
  const collectionId: string | null = searchParams.get("collectionId");
  const lastEventDateTime: number | null = Number.parseInt(
    searchParams.get("lastEventDateTime") ?? "",
    10,
  );
  return {
    name: name ?? undefined,
    collectionId: typeof collectionId === "string"
      ? b.assertBrandString<c.CollectionId>(collectionId)
      : undefined,
    lastEventDateTime: Number.isNaN(lastEventDateTime)
      ? lastEventDateTime
      : undefined,
  };
};

export const itemFilterToSearchParams = (
  filter: a.ItemFilter,
): URLSearchParams => (new URLSearchParams([
  ...filter.name === undefined ? [] : [["name", filter.name]],
  ...filter.collectionId === undefined
    ? []
    : [["collectionId", filter.collectionId]],
  ...filter.lastEventDateTime === undefined
    ? []
    : [["lastEventDateTime", filter.lastEventDateTime.toString()]],
]));

export const itemEventFilterFromSearchParams = (
  searchParams: URLSearchParams,
): a.ItemEventFilter => {
  const note: string | null = searchParams.get("note");
  const typeId: string | null = searchParams.get("typeId");
  const itemId: string | null = searchParams.get("itemId");
  const accountId: string | null = searchParams.get("accountId");
  const createDateTime: number | null = Number.parseInt(
    searchParams.get("createDateTime") ?? "",
    10,
  );
  const date: number | null = Number.parseInt(
    searchParams.get("date") ?? "",
    10,
  );
  const imageUrl: string | null = searchParams.get("imageUrl");
  return {
    note: note ?? undefined,
    typeId: typeof typeId === "string"
      ? b.assertBrandString<c.ItemEventTypeId>(typeId)
      : undefined,
    itemId: typeof itemId === "string"
      ? b.assertBrandString<c.ItemId>(itemId)
      : undefined,
    accountId: typeof accountId === "string"
      ? b.assertBrandString<c.AccountId>(accountId)
      : undefined,
    createDateTime: Number.isNaN(createDateTime) ? createDateTime : undefined,
    date: Number.isNaN(date) ? date : undefined,
    imageUrl: imageUrl ?? undefined,
  };
};

export const itemEventFilterToSearchParams = (
  filter: a.ItemEventFilter,
): URLSearchParams => (new URLSearchParams([
  ...filter.note === undefined ? [] : [["note", filter.note]],
  ...filter.typeId === undefined ? [] : [["typeId", filter.typeId]],
  ...filter.itemId === undefined ? [] : [["itemId", filter.itemId]],
  ...filter.accountId === undefined ? [] : [["accountId", filter.accountId]],
  ...filter.createDateTime === undefined
    ? []
    : [["createDateTime", filter.createDateTime.toString()]],
  ...filter.date === undefined ? [] : [["date", filter.date.toString()]],
  ...filter.imageUrl === undefined ? [] : [["imageUrl", filter.imageUrl]],
]));

export const itemEventTypeFilterFromSearchParams = (
  searchParams: URLSearchParams,
): a.ItemEventTypeFilter => {
  const name: string | null = searchParams.get("name");
  const canInputDesigner: string | null = searchParams.get("canInputDesigner");
  const canInputMaker: string | null = searchParams.get("canInputMaker");
  const inputDate: string | null = searchParams.get("inputDate");
  const inputImage: string | null = searchParams.get("inputImage");
  const code: string | null = searchParams.get("code");
  return {
    name: name ?? undefined,
    canInputDesigner: canInputDesigner === "true"
      ? true
      : canInputDesigner === "false"
      ? false
      : undefined,
    canInputMaker: canInputMaker === "true"
      ? true
      : canInputMaker === "false"
      ? false
      : undefined,
    inputDate: inputDate === "true"
      ? true
      : inputDate === "false"
      ? false
      : undefined,
    inputImage: inputImage === "true"
      ? true
      : inputImage === "false"
      ? false
      : undefined,
    code: code ?? undefined,
  };
};

export const itemEventTypeFilterToSearchParams = (
  filter: a.ItemEventTypeFilter,
): URLSearchParams => (new URLSearchParams([
  ...filter.name === undefined ? [] : [["name", filter.name]],
  ...filter.canInputDesigner === undefined
    ? []
    : [["canInputDesigner", filter.canInputDesigner.toString()]],
  ...filter.canInputMaker === undefined
    ? []
    : [["canInputMaker", filter.canInputMaker.toString()]],
  ...filter.inputDate === undefined
    ? []
    : [["inputDate", filter.inputDate.toString()]],
  ...filter.inputImage === undefined
    ? []
    : [["inputImage", filter.inputImage.toString()]],
  ...filter.code === undefined ? [] : [["code", filter.code]],
]));
