/** generated by
 * - https://jsr.io/@narumincho/commection@0.0.2
 * - https://jsr.io/@narumincho/js-ts-code-generator@0.8.2
 * Do not edit!
 *
 * @module
 */

import * as a from "./common/id.ts";
import * as b from "./common/type.ts";
import * as c from "./common/filterType.ts";
import * as d from "../../runtime/common.ts";
import * as e from "@narumincho/http-server";
export type Implement<Context extends unknown> = {
  readonly getCollectionByIdSet: (
    a: ReadonlySet<a.CollectionId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.CollectionId, b.Collection | Error>>;
  readonly getCollectionByFilter: (
    a: c.CollectionFilter,
    b: Context,
  ) => Promise<d.OrderedMap<a.CollectionId, b.Collection | Error>>;
  readonly getBrandByIdSet: (
    a: ReadonlySet<a.BrandId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.BrandId, b.Brand | Error>>;
  readonly getBrandByFilter: (
    a: c.BrandFilter,
    b: Context,
  ) => Promise<d.OrderedMap<a.BrandId, b.Brand | Error>>;
  readonly getAccountByIdSet: (
    a: ReadonlySet<a.AccountId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.AccountId, b.Account | Error>>;
  readonly getAccountByFilter: (
    a: c.AccountFilter,
    b: Context,
  ) => Promise<d.OrderedMap<a.AccountId, b.Account | Error>>;
  readonly getMyAccount: (a: Context) => Promise<b.Account>;
  readonly getAccountPrivateByIdSet: (
    a: ReadonlySet<a.AccountId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.AccountId, b.AccountPrivate | Error>>;
  readonly getDesignerByIdSet: (
    a: ReadonlySet<a.DesignerId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.DesignerId, b.Designer | Error>>;
  readonly getItemByIdSet: (
    a: ReadonlySet<a.ItemId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.ItemId, b.Item | Error>>;
  readonly getItemByFilter: (
    a: c.ItemFilter,
    b: Context,
  ) => Promise<d.OrderedMap<a.ItemId, b.Item | Error>>;
  readonly getItemImageByIdSet: (
    a: ReadonlySet<a.ItemId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.ItemId, b.ItemImage | Error>>;
  readonly getItemEventByIdSet: (
    a: ReadonlySet<a.ItemEventId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.ItemEventId, b.ItemEvent | Error>>;
  readonly getItemEventByFilter: (
    a: c.ItemEventFilter,
    b: Context,
  ) => Promise<d.OrderedMap<a.ItemEventId, b.ItemEvent | Error>>;
  readonly getItemEventTypeByIdSet: (
    a: ReadonlySet<a.ItemEventTypeId>,
    b: Context,
  ) => Promise<ReadonlyMap<a.ItemEventTypeId, b.ItemEventType | Error>>;
  readonly getItemEventTypeByFilter: (
    a: c.ItemEventTypeFilter,
    b: Context,
  ) => Promise<d.OrderedMap<a.ItemEventTypeId, b.ItemEventType | Error>>;
};

/**
 * HTTP サーバーの operations
 *
 * https://jsr.io/@narumincho/http-server を使って処理することができる
 */
export const operations = [
  e.operation.get({
    path: "/collection",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/collectionList",
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/brand",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/brandList",
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/account",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/accountList",
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/accountPrivate",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/designer",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/item",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/itemList",
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/itemImage",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/itemEvent",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/itemEventList",
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/itemEventType",
    queryParameters: {
      id: e.query.array({
        deprecated: false,
        description: "",
        example: [],
        queryItemType: e.query.string(),
      }),
    },
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
  e.operation.get({
    path: "/itemEventTypeList",
    responses: [
      e.response.ok({
        headers: [],
        description: "",
        content: [e.body.applicationJson(e.json.object({}))],
      }),
    ],
    handler: (
      parameter,
    ) => (parameter.response["200"]({}, "application/json", {})),
  }),
];
